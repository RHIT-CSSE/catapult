<p>&nbsp;</p>
<h1>TicTacToe Exercise</h1>
<p>This exercise serves as the "show your instructor that you're ready to move on to Object-Oriented Programming" experience. In the process you should learn a few new things, and firm up what you already know.&nbsp; This is not an easy exercise.&nbsp; It is best to work with a partner, and to get help when needed.&nbsp; Don't move on to the next part until you understand the code from the current part.</p>
<p>TicTacToe is usually played on a 3-by-3 square board.&nbsp; To make things more interesting (and to help you learn how to write flexible code) our version will allow any square board size.&nbsp; To see what the finished product might look like, run this file:&nbsp; <a href="TicTacToe5.cpython-37.pyc">Tictactoe5.pyc</a>. [Hint: direct your command line console to the folder containing the .pyc files, then type: <code>python3 TicTacToe5.cpython-37.pyc</code>] After you enter the board size (I suggest entering 3, 4, or 5), and press Enter, click the mouse on the board.&nbsp; Note that it is possible that the board will pop up behind other windows.&nbsp; If you don't see the board after entering the board size, try moving or hiding some other windows.</p>
<p>To make it easy to download and run all of the "pyc" files, there is a <a href="TicTacToe.zip">ZIP file</a> that contains all of them.</p>
<h2>One step at a time!</h2>
<p>After you have completed each step, show your code to the instructor or assistant. Of course, we will also be available to give you help whenever you need it. And you can also get help from other students. But don't just let someone tell you the code. Make sure that you understand each thing you do before you go on.</p>
<ol start="0">
<li>(All good programmers start with 0.) Write a simple program called <strong>TicTacToe.py</strong> that creates a window and draws a 3-by-3 TicTacToe grid. Your finished program may look something like <a href="TicTacToe0.cpython-37.pyc">TicTacToe0.pyc</a> . Try it out before writing your code.
<p>This task is fairly simple, but you should do it in a way that will help you plan ahead for future versions.&nbsp; Here are a few lines in my code that you may want to use.&nbsp;Defining named constants and using them in your code instead of numbers can avoid the use of "magic numbers" that can make code difficult to enhance and maintain.&nbsp; In this case, the board size will not always be 3 in later versions of the program,</p>
<pre>     BOARDSIZE  = 3                   # number of rows and columns
     BOARDRANGE = range(BOARDSIZE)    # range of rows and columns
     PPS        = 150                 # length of the square in pixels (PPS = "Pixels Per Square")
     WINDOWSIZE = PPS * BOARDSIZE     # width (and height) of window
     INSET      = 15                  # num pixels around X's and O's in squares

  </pre>
<p align="left">If you want to make the board stay on the screen until the user closes the window like the sample program does, use the while loop structure in the main function like your previous assignments did. Don't forget that you need to import the <strong>pygame</strong>&nbsp;module in the very beginning.</p>
<p align="left"><strong><span style="color: red;">When you finish this step</span></strong>, you may want to look at <a href="Solutions/TicTacToe0.py" target="_blank" rel="noopener">our solution</a>;&nbsp; It may give you some ideas that can simplify your work in future steps. If our solution to this step or any later step contains any code that you do not understand, you should ask your instructor or one of the student assistants to help you understand it.</p>
</li>
<li>Enhance your <code>TicTacToe.py</code> program (don't start a new program) so it asks the user for the board size, then draws the grid, as in this program: <a href="TicTacToe1.cpython-37.pyc">TicTacToe1.pyc</a> . The number the user enters can become the new value of BOARDSIZE; then after calculating WINDOWSIZE so that it will hold the different-sized board, you probably do not have to change the rest of the program . If you are a beginning programmer, you may want to skip the part that lets the user simply press ENTER, and instead require the user to always enter a number. (Hint for everyone else: if the user just presses ENTER, the returned string will be the empty string: <code>""</code>).
<p align="left"><strong><span style="color: red;">When you finish this step</span></strong>, you may want to look at <a href="Solutions/TicTacToe1.py" target="_blank" rel="noopener">our solution</a>;&nbsp; It may give you some ideas that can simplify your work in future steps. If our solution to this step or any later step contains any code that you do not understand, you should ask your instructor or one of the student assistants to help you understand it.</p>
</li>
<li>Define two new functions, <strong>draw_x&nbsp;</strong>and <strong>draw_o</strong>. Each of them should take two arguments, a row number and a column number. For example, the call <tt>draw_x(1, 2)</tt> should cause an X to be drawn in the second row and third column (don't forget that row and column numbers start with 0), while the call <tt>draw_o(0, 2)</tt> should cause an O to be drawn in the first row and third column.&nbsp; See this example: <a href="TicTacToe2.cpython-37.pyc">TicTacToe2.pyc</a> . You may find it helpful to write some helper functions that map row and column positions to window pixel locations.&nbsp; For, example, I wrote this function to calculate the coordinates of the upper-right point of an X that is to be drawn in the square in a given row and column:
<pre>    def rect_upper_right(row, col):
    'coordinates of top right of inset X or O'
    return PPS*(col+1) - INSET, PPS*row + INSET
</pre>
Call each function with some different values for the parameters and verify that they work correctly. Can you put an X and an O in the same square? (In a later step you will solve this).
<p align="left"><strong><span style="color: red;">When you finish this step</span></strong>, you may want to look at <a href="Solutions/TicTacToe2.py" target="_blank" rel="noopener">our solution</a>;&nbsp; If you don't understand something there, ask.</p>
</li>
<li>Enhance your program (using loops) by writing a <strong>fill_board( )</strong> function that fills the entire board with alternating Xs and Os, as in this example: <a href="TicTacToe3.cpython-37.pyc">TicTacToe3.pyc</a>. Your code should work similarly to mine whether the board size is even or odd.&nbsp; Don't forget to actually call <strong>fill_board</strong>!<br />
<p align="left"><strong><span style="color: red;">When you finish this step</span></strong>, you may want to look at <a href="Solutions/TicTacToe3.py" target="_blank" rel="noopener">our solution</a>;&nbsp; If you don't understand something there, ask.</p>
</li>
<li>Use pygame's event type&nbsp;to determine where the user clicks, and draw an X in that square.&nbsp; The next click should cause an O to be placed, etc.&nbsp; You can use simple arithmetic to get from the coordinates of the clicked point to the row and column number of the board square that contains that point.&nbsp; When there have been enough clicks to fill the board, the program should terminate.&nbsp; Here is my example:&nbsp; <a href="TicTacToe4.cpython-37.pyc">TicTacToe4.pyc</a>.&nbsp; [Hint: You should remove the call to <strong>fill_board</strong>.]
<p align="left">[Extra Hint] In order to enable the X's and O's to be repaint on the screen every time we update the display in the while loop. We need to keep track of which squares on the board are already filled. I suggest using a two-dimensional list of numbers, one number for each square on the board. I used '.' (a dot) to represent that the corresponding square is unfilled, x for an X, and o for an O.&nbsp;</p>
For example, if the board is <img src="TTT-4.png" width="200" height="207" border="0" /> , then the corresponding nested list is <tt>[[., x, o, .], [., ., x, .], [x, o, ., .], [., ., ., o]]. </tt><br /> Now, when the user clicks a square, see if the corresponding list position contains '.'. If so, draw the appropriate X or O, and mark the corresponding list position to indicate which symbol is in that square.&nbsp; If not, ignore the click altogether (make sure that you only count the number of successful clicks, so that the program will not quit until the board is actually full).&nbsp;&nbsp;
<p align="left"><strong>When you finish this step</strong>, you may want to look at <a href="Solutions/TicTacToe4.py" target="_blank" rel="noopener">our solution</a>;&nbsp; If you don't understand something there, ask.</p>
</li>
<li>After each successful user click, check to see if this move caused a win by marking an entire row, column or diagonal containing the same symbol (X or O). I found it easiest to do this by breaking the task up into several small tasks and writing a short function for each task. If there is a winner, draw a line through the winning squares, and stop the loop by using a <strong>break </strong>statement. My example is the one that you ran at the beginning of this document, <a href="TicTacToe5.cpython-37.pyc">TicTacToe5.pyc</a>.
<p align="left"><strong>When you finish this step</strong>, you may want to look at <a href="Solutions/TicTacToe5.py" target="_blank" rel="noopener">our solution</a>;&nbsp; It may give you some ideas that you can use in future programs that you write.</p>
</li>
</ol>
<p>Whew! There is a lot to do here, but if you have successfully navigated it, you are now a certified Catapult programmer!</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
