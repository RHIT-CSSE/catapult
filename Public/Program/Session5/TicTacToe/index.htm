<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>TicTacToe Exercise</title>
</head>

<body>
<h1>TicTacToe Exercise</h1>
This exercise serves as the "show your instructor that you're ready to move on 
to Object-Oriented Programming" experience. 
In the process you should learn a few new things, and firm up what you already 
know.&nbsp; This is not an easy exercise.&nbsp; It is best to work with a 
partner, and to get help when needed.&nbsp; Don't move on to the next part until 
you understand the code from the current part.
<p>TicTacToe is usually played on a 3-by-3 square board.&nbsp; To make things 
more interesting (and to help you learn how to write flexible code) our version 
will allow any square board size.&nbsp; To see what the finished product might 
look like, run this file:&nbsp; <a href="tictactoe6.pyc">tictactoe6.pyc</a>. 
After you enter the board size (I suggest entering 3, 4, or 5), and press Enter, 
click the mouse on the board.&nbsp; Note that it is possible that the board will 
pop up behind other windows.&nbsp; If you don't see the board after entering the 
board size, try moving or hiding some other windows.</p>
<p>To make it easy to download and run all of the &quot;pyc&quot; files, there is a
<a href="TicTacToe.zip">ZIP file</a> that contains all of them.</p>
<h2> One step at a time!</h2>
After you have completed each step, show your code to the instructor or 
assistant.  Of course, we will also be available to give you help whenever you need it. And you can also get help from other students.  But don't just let someone tell you the 
code.  Make sure that you understand 
each thing you do before you go on.
<ol start="0">
<li>
  (All good programmers start with 0.) Write a simple program called 
  <b>TicTacToe.py</b> that creates a window and draws a 3-by-3 TicTacToe grid.  
  Your finished program may look something like 
  <a href="tictactoe0.pyc">tictactoe0.pyc</a> . Try it out before writing your 
	code. 
  <p>This task is fairly simple, but you should do it in a way that will help 
	you plan ahead 
     for future versions.&nbsp; 
     Here are a few lines in my code that you may want to use.&nbsp;Defining named 
     constants and using them in your code instead of numbers can 
     avoid the use of &quot;magic numbers&quot; that can make code difficult to enhance and 
     maintain.&nbsp; In this case, the board size will not always be 3 in later 
	versions of the program, </p>
  <pre>
     BOARDSIZE  = 3                   # number of rows and columns
     BOARDRANGE = range(BOARDSIZE)    # range of rows and columns
     PPS        = 150                 # length of the square in pixels (PPS = "Pixels Per Square")
     WINDOWSIZE = PPS * BOARDSIZE     # width (and height) of window
     INSET      = 15                  # num pixels around X's and O's in squares 
     
  </pre>
  <p align="left">If you want to make the board linger on the screen for a few 
	seconds and then disappear like the sample program does, 
     import the <b>time</b> module, and include the line 
	 <tt>time.sleep(3)</tt> before your <tt>window.close()</tt> statement.&nbsp; 
	Don't forget that you also need to import the <b>zellegraphics</b> module.</b> </p>
	
      <p align="left"><strong><font color="red">When you finish this step</font></strong>, you may want to look at 
	<a href="../TicTacToeSolutions/drBoutell/TicTacToe0.py" target="_blank">our solution</a>;&nbsp; 
       It may give you some ideas that can simplify your work in future steps. 
       If our solution to this step or any later step contains any code that you do not understand, 
       you should ask your instructor or one of the student assistants to help you understand it.
    </p>
    
 </li>
	 
	 
<li>Enhance your <code>TicTacToe.py</code> program (don't start a new program) so it asks the user for the board size, then draws the grid, as in this program:
	<a href="tictactoe1.pyc">tictactoe1.pyc</a> . The number the user enters can 
become the new value of BOARDSIZE; then after calculating WINDOWSIZE so that it 
will hold the different-sized board, you probably do not have to change the rest 
of the program . If you are a beginning programmer, you may want to skip the 
part that lets the user simply press ENTER, and instead require the user to 
always enter a number. (Hint for everyone else: if the user just presses ENTER, 
the returned string will be the empty string: <code>""</code>). 


   <p align="left"><strong><font color="red">When you finish this step</font></strong>, you may want to look at 
	<a href="../TicTacToeSolutions/drBoutell/TicTacToe1.py" target="_blank">our solution</a>;&nbsp; 
       It may give you some ideas that can simplify your work in future steps. 
       If our solution to this step or any later step contains any code that you do not understand, 
       you should ask your instructor or one of the student assistants to help you understand it.
    </p>
    
 </li>



<li>Define two new functions, <b>drawX </b>and <b>drawO</b>.  Each of them should take two 
arguments, a row number and a column number.  For example, the call <tt>drawX(1, 2)</TT> 
should cause an X to be drawn in the second row and third column (don't forget 
that row and column numbers start with 0), while the call <tt>drawO(0, 2)</TT> 
should cause an O to be drawn in the first row and third column.&nbsp; See this example:
<a href="tictactoe2.pyc">tictactoe2.pyc</a> . You may find it helpful to write 
some helper functions that map row and column positions to window pixel 
locations.&nbsp; For, example, I wrote this function to calculate the 
coordinates of the upper-right point of an X that is to be drawn in the square in a given row 
and column:
<pre>
    def rectUpperRight(row, col):
    'coordinates of top right of inset X or O'
    return Point(PPS*(col+1) - INSET, PPS*row + INSET)
</pre>
    Call each function with some different values for the parameters and verify that they work correctly.  
    Can you put an X and an O in the same square? 
    (In a later step you will solve this). 
 
  <p align="left"><strong><font color="red">When you finish this step</font></strong>, you may want to look at 
	<a href="../TicTacToeSolutions/drBoutell/TicTacToe2.py" target="_blank">our solution</a>;&nbsp; If you don't 
	understand something there, ask.<br />
    </p>
    
 </li>
   
    
 <li>
Enhance your program (using loops) by writing a <b>fillBoard( )</b> function that fills the entire board with alternating Xs and Os, as in this example: 
<a href="tictactoe3.pyc">tictactoe3.pyc</a>. Your code should work similarly to 
mine whether the board size is even or odd.&nbsp; Don't forget to actually call
<b>fillBoard</b>!<br />

  <p align="left"><strong><font color="red">When you finish this step</font></strong>, you may want to look at 
	<a href="../TicTacToeSolutions/drBoutell/TicTacToe3.py" target="_blank">our solution</a>;&nbsp; If you don't 
	understand something there, ask.<br />
    </p>
    
 </li>



<li> 
Use the window's <b>mouseClick() </b><i>method</i> (i.e. a function associated with an 
object) to determine where the user clicks, and draw an X&nbsp; in that square.&nbsp; 
The next click should cause an O to be placed, etc.&nbsp; You can use simple 
arithmetic to get from the coordinates of the clicked point to the row and colum 
number of the board square that contains that point.&nbsp; When there have been 
enough clicks to fill the board, the program should terminate.&nbsp; At this 
point, we have no mechanism for keeping track of previously-clicked squares, so 
there is no way to prevent having an X and an O drawn in the same square.&nbsp; 
Here is my example:&nbsp; <a href="tictactoe4.pyc">tictactoe4.pyc</a>.&nbsp; 
[Hint: You 
should remove the call to <b>fillBoard</b> .]

  <p align="left"><strong><font color="red">When you finish this step</font></strong>, you may want to look at 
	<a href="../TicTacToeSolutions/drBoutell/TicTacToe4.py" target="_blank">our solution</a>;&nbsp; If you don't 
	understand something there, ask.<br />
    </p>
    
 </li>

<li>
   Keep track of which squares on the board are already filled.  I suggest 
   using a two-dimensional list of numbers, one number for each square on
   the board.  I used -1 to represent that the corresponding square is unfilled,
   0 for an X, and 1 for an O. 
   <br>
	For example, if the board is
	<img border="0" src="TTT-5.gif"> , then the corresponding nested list is <br /> 
	<tt>[[-1, 1, 0, -1], [-1, -1, 0, -1], [0, 1, -1, -1], [-1, -1, -1, -1]]. </tt><br />
	Now, when the user clicks a square, see if the corresponding list position 
	contains -1. If so, draw the appropriate X or O, and mark the corresponding list position 
	to indicate which symbol is in that square.&nbsp; If not, ignore the click 
	altogether (make sure that you only count the number of successful clicks, 
	so that the program will not quit until the board is actually full).&nbsp; 
	Here is my example <a href="tictactoe5.pyc">tictactoe5.pyc . </a>
	
	  <p align="left"><strong>When you finish this step</strong>, you may want to look at 
	  <a href="../TicTacToeSolutions/drBoutell/TicTacToe5.py" target="_blank">our solution</a>;&nbsp; 
       It may give you some ideas that can simplify your work in future steps.<br />
    </p>
    
 </li>

	
	<li> After each successful user click, check to see if this move caused a win by marking an entire row, column or diagonal containing the same symbol (X or O).  
     I found it easiest to do this by breaking the task up into several small tasks and writing a short function for each task. If there is a winner, draw a 
     line through the winning squares, and stop the loop by using a <b>break </b>statement. My example is the one that you ran at the beginning of this document, 
     <a href="tictactoe6.pyc">tictactoe6.pyc</a>.

  <p align="left"><strong>When you finish this step</strong>, you may want to look at 
	<a href="../TicTacToeSolutions/drBoutell/TicTacToe6.py" target="_blank">our solution</a>;&nbsp; 
       It may give you some ideas that you can use in future programs that you write. <br />
    </p>
    
 </li>


</ol>
Whew!  There is a lot to do here, but if you have successfully navigated it, you are now a certified Catapult programmer!
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>

</html>